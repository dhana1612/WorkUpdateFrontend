const statusmessage = "Request is Pending"
var EmailFromURL;

window.onload = function () {
    myFunction();
};

function myFunction() {
    const params1 = new URLSearchParams(window.location.search); 
    EmailFromURL = params1.get('value'); 
    displayAllData()
    displayAllUserName()
    RetriveUserNameForChatMessage(EmailFromURL) 
    RetriveChatMessage()
}


//Workstatus button

    //When I click the Workupdate button it will display the Table
    document.getElementById('toggleTableButton').onclick = function() {
        var table = document.getElementById('dataTable');
        if (table.style.display === 'none') {
            table.style.display = 'block'; // Show the table
        } else {
            table.style.display = 'none'; // Hide the table
        }
    };

    //Retrive all Data from Database 
    async function displayAllData() {
        try {
            const response = await fetch(`https://localhost:7035/api/Admin`);
            
            if (!response.ok) {
                const errorMessage = await response.text();
                throw new Error(errorMessage || "Network response was not ok");
            }

            const data = await response.json();

            if (Array.isArray(data)) {
                populateTable(data); 
            } else {
                alert("Unexpected data format");
            }
        } catch (error) {
            alert(error);
        }
    }

    //  PopulateTable() Function store the retrive datas in Table Format 
    async function populateTable(data) {
            const tableBody = document.getElementById("dataTable").querySelector("tbody");
            tableBody.innerHTML = ""; // Clear existing rows
    
            let serial_number = 1;
    
            for (let item of data) 
            {
                const unqiuevalue = item.id;
                const emailres = item.email;
                const workstatusres = item.workUpdates;
                const taskLinksres = item.taskLinks;
                const dateres = item.date;
                var feedbackmessage= item.feedbackmessage;
                var responsemessage =item.statusmessage;
                
    
    
         //serial Number
                const row = document.createElement("tr");
                var idCell = document.createElement("td");
                idCell.textContent = serial_number;
                serial_number = serial_number + 1;
                row.appendChild(idCell);
    
         // Create username column
                const name = document.createElement("td");
                const email_Id = item.email;
                const username = await RetriveUserNAme(email_Id); 
                name.textContent = username;
                row.appendChild(name);
    
         // Create date column
                const date = document.createElement("td");
                date.textContent = item.date;
                row.appendChild(date);
    
         // Create work updates column
                const workUpdates = document.createElement("td");
                workUpdates.textContent = item.workUpdates;
                row.appendChild(workUpdates);
    
         // Create task links column
                const taskLinks = document.createElement("td");
                const link = document.createElement("a");
                link.href = item.taskLinks; 
                link.textContent = item.taskLinks; 
                link.target = "_blank"; 
                taskLinks.appendChild(link);
                row.appendChild(taskLinks); 
    
    
         //workstatus dropdown
                const status = document.createElement("td");
                const statusDropdown = document.createElement("select");
                statusDropdown.classList.add("form-select", "form-select-sm");
                statusDropdown.style.border = "none";
                
                // Define the options for the dropdown
                const options = [
                    { value: "Pending", text: "Pending", class: "btn-warning" },
                    { value: "Success", text: "Success", class: "btn-success" },
                    { value: "Rejected", text: "Rejected", class: "btn-danger" },
                ];
                
                // Populate the dropdown with options
                options.forEach(optionData => {
                    const option = document.createElement("option");
                    option.value = optionData.value;
                    option.textContent = optionData.text;
                    option.classList.add(optionData.class);
                    if (optionData.value === responsemessage) {
                        option.selected = true; 
                    }
                    statusDropdown.appendChild(option);
                });
                
                // statusDropdown.className = "form-select form-select-sm " + options.find(o => o.value === "Pending").class;
                const feedbackBox = document.createElement("div");
                feedbackBox.classList.add("feedback-box", "bg-light", "p-3", "rounded", "shadow-lg");
                feedbackBox.style.position = "absolute";
                feedbackBox.style.visibility = "hidden";
                feedbackBox.style.zIndex = "950"; 
                feedbackBox.style.width = "150px"; 
                feedbackBox.style.maxWidth = "50%"; 
                
                // Add a heading for the feedback box
                const feedbackTitle = document.createElement("h6");
                feedbackTitle.textContent = "Feedback";
                feedbackBox.appendChild(feedbackTitle);
                
                // Add an input for feedback inside the box
                const feedbackInput = document.createElement("textarea");
                feedbackInput.placeholder = "Write your feedback here...";
                feedbackInput.classList.add("form-control", "mb-2");
                feedbackInput.style.height = "100px"; 
                feedbackBox.appendChild(feedbackInput);
                
                // Create the "OK" button to close the box
                const okButton = document.createElement("button");
                okButton.textContent = "OK";
                okButton.classList.add("btn", "btn-primary", "btn-sm");
                feedbackBox.appendChild(okButton);
                
            
                const showFeedbackBox = () => {
                    const rect = statusDropdown.getBoundingClientRect();
                    feedbackBox.style.left = `${rect.right + 10}px`; 
                    feedbackBox.style.top = `${rect.top}px`;
                    feedbackBox.style.visibility = "visible"; 
                };
                
                const hideFeedbackBox = () => {
                    feedbackBox.style.visibility = "hidden"; 
                };
                
                //feedback textarea selected 
                okButton.addEventListener("click", () => {
                    const feedback = feedbackInput.value; 
                    feedbackmessage = "Rejected : "  + feedback;
                    updateResponseMessage(responsemessage,feedbackmessage, unqiuevalue,emailres,workstatusres,taskLinksres,dateres);
                    hideFeedbackBox(); 
                });
                
                //dropdown box change
                statusDropdown.addEventListener("change", () => {
                    //statusDropdown.classList.remove("btn-warning", "btn-success", "btn-danger");
                    responsemessage =statusDropdown.value;
                    const selectedOption = options.find(o => o.value === statusDropdown.value);
                    statusDropdown.classList.add(selectedOption.class);
                
                    
                    if (statusDropdown.value === "Rejected") 
                    {
                        document.body.appendChild(feedbackBox);  
                        showFeedbackBox();  
                    } else {
                        hideFeedbackBox();  
                    }
    
                    if(statusDropdown.value === "Success"){
                        feedbackmessage = "Approved";
                        updateResponseMessage(responsemessage,feedbackmessage, unqiuevalue,emailres,workstatusres,taskLinksres,dateres);
                        statusDropdown.classList("btn-success");
                    }
                    else if(statusDropdown.value === "Pending"){
                        feedbackmessage = "Request is Pending";
                        updateResponseMessage(responsemessage,feedbackmessage, unqiuevalue,emailres,workstatusres,taskLinksres,dateres);
                        statusDropdown.classList("btn-warning");
                    }
                
                });
            
    
                // Append the dropdown to the status cell
                status.appendChild(statusDropdown);
                
                // Append the status cell to the row
                row.appendChild(status);
                
                // Append the row to the table body
                tableBody.appendChild(row);
                
            }
    }

    // Retrieve the UserName through Email
    async function RetriveUserNAme(Email_through_populate_function) {
        const data = { Email: Email_through_populate_function };
        
        try {
            const response = await fetch("https://localhost:7035/api/Admin/RetriveUserName", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(data)
            });

            if (!response.ok) {
                throw new Error("Network response was not ok");
            }

            const message = await response.text();
            return message; 

        } catch (error) {
            alert("RetriveUserName Error"+error);
            return ""; // Return empty string in case of error
        }
    }

    //Updated the ResponseMessage
    function updateResponseMessage(responsemessage,feedbackmessage, unqiuevalue,emailres,workstatusres,taskLinksres,dateres) {        

        const data = {
            Id:unqiuevalue,
            Email:emailres,
            date:dateres,
            WorkUpdates:workstatusres,
            TaskLinks:taskLinksres,
            statusmessage:responsemessage,
            feedbackmessage: feedbackmessage 
        };
        console.log(data);

        fetch("https://localhost:7035/api/Admin/updateResponseMessage", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(data)
        })

        
        .then(response => {
            if (!response.ok) {
                return response.text().then(errorMessage => {
                    throw new Error(errorMessage || "Network response was not ok");
                });
            }
            return response.text();
        })
        .then(message => {
            displayAllData();
        })
        
        .catch(error => {
        
        });


    }

//WorkStatus button Logic End




//DropDown Logic

    // Retrieve the Data from Database through Email
    async function displayAllUserName() {
        try {
            const response = await fetch(`https://localhost:7035/api/Admin/ListOfUserNames`);
            
            if (!response.ok) {
                const errorMessage = await response.text();
                throw new Error(errorMessage || "Network response was not ok");
            }

            const data = await response.json();

            if (Array.isArray(data)) {
                ListUserName(data); 
            } else {
                alert("Unexpected data format");
            }
        } catch (error) {
            alert(error);
        }
    }

    //display the username return by displayAllUserName function in dropdown
    async function ListUserName(data) {
        const listbody = document.getElementById("EmployeeName");
        listbody.className = "dropdown-menu";

    
        for (let item of data) {
            const listelement = document.createElement("li");
            listelement.textContent = item;
            listelement.style.cursor = 'pointer';

            listelement.onclick = function() {
                handleListItemClick(item); 
            };

            listbody.appendChild(listelement);
        }
    }

    //when i click the particular UserName in the dropdown this function will execute
    async function handleListItemClick(itemValue_Name) {
        document.getElementById("user1").innerHTML = itemValue_Name;user1
        var table = document.getElementById('dataTable1');
        if (table.style.display === 'none') {
            table.style.display = 'block'; // Show the table
        }
        var email_throught_name = await RetriveEmailthroughUserName(itemValue_Name);
        displayAllDatabasedEmail(email_throught_name);

    }
    //Retrieve the UserName through Email
    async function RetriveEmailthroughUserName(value) {
        const data = { UserName: value };
        
        try {
            const response = await fetch("https://localhost:7035/api/Admin/RetriveEmailthroughUserName", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify(data)
            });

            if (!response.ok) {
                throw new Error("Network response was not ok");
            }

            const message = await response.text();
            var emailID = message;
            return emailID; // Return the username
        } catch (error) {
            alert(error);
            document.getElementById("message").textContent = error;
            return ""; // Return empty string in case of error
        }
    }
    //Retrive the Data from Database through Email
    function displayAllDatabasedEmail(email_throught_name) {
        fetch(`https://localhost:7035/api/WorkUpdate/${encodeURIComponent(email_throught_name)}`)
            .then(response => {
                if (!response.ok) {
                    return response.text().then(errorMessage => {
                        throw new Error(errorMessage || "Network response was not ok");
                    });
                }
                return response.json(); 
            })
            .then(data => { 
                console.log(data);
                if (Array.isArray(data)) {
                    populateTablebasedEmail(data); 
                } else {
                    alert("Unexpected data format");
                }
            })
            .catch(error => {
                document.getElementById("dataTable").style.display = "none";
            });
    }  

    // PopulateTable() Function store the retrive datas in Table Format 
    async function populateTablebasedEmail(data) {
        const tableBody = document.getElementById("dataTable1").querySelector("tbody");
        tableBody.innerHTML = ""; // Clear existing rows

        let serial_number = 1;

        for (let item of data) 
        {
            
            console.log(item)
            const unqiuevalue = item.id;
            const emailres = item.email;
            const workstatusres = item.workUpdates;
            const taskLinksres = item.taskLinks;
            const dateres = item.date;
            var feedbackmessage= item.feedbackmessage;
            var responsemessage =item.statusmessage;


    //serial Number
            const row = document.createElement("tr");
            var idCell = document.createElement("td");
            idCell.textContent = serial_number;
            serial_number = serial_number + 1;
            row.appendChild(idCell);


    // Create date column
            const date = document.createElement("td");
            date.textContent = item.date;
            row.appendChild(date);

    // Create work updates column
            const workUpdates = document.createElement("td");
            workUpdates.textContent = item.workUpdates;
            row.appendChild(workUpdates);

    // Create task links column
            const taskLinks = document.createElement("td");
            const link = document.createElement("a");
            link.href = item.taskLinks; 
            link.textContent = item.taskLinks; 
            link.target = "_blank"; 
            taskLinks.appendChild(link);
            row.appendChild(taskLinks); 


    //workstatus dropdown
            const status = document.createElement("td");
            const statusDropdown = document.createElement("select");
            statusDropdown.classList.add("form-select", "form-select-sm");
            statusDropdown.style.border = "none";
            
            // Define the options for the dropdown
            const options = [
                { value: "Pending", text: "Pending", class: "btn-warning" },
                { value: "Success", text: "Success", class: "btn-success" },
                { value: "Rejected", text: "Rejected", class: "btn-danger" },
            ];
            
            // Populate the dropdown with options
            options.forEach(optionData => {
                const option = document.createElement("option");
                option.value = optionData.value;
                option.textContent = optionData.text;
                option.classList.add(optionData.class);
                if (optionData.value === responsemessage) {
                    option.selected = true; 
                }
                statusDropdown.appendChild(option);
            });
            
            // statusDropdown.className = "form-select form-select-sm " + options.find(o => o.value === "Pending").class;
            const feedbackBox = document.createElement("div");
            feedbackBox.classList.add("feedback-box", "bg-light", "p-3", "rounded", "shadow-lg");
            feedbackBox.style.position = "absolute";
            feedbackBox.style.visibility = "hidden";
            feedbackBox.style.zIndex = "950"; 
            feedbackBox.style.width = "150px"; 
            feedbackBox.style.maxWidth = "50%"; 
            
            // Add a heading for the feedback box
            const feedbackTitle = document.createElement("h6");
            feedbackTitle.textContent = "Feedback";
            feedbackBox.appendChild(feedbackTitle);
            
            // Add an input for feedback inside the box
            const feedbackInput = document.createElement("textarea");
            feedbackInput.placeholder = "Write your feedback here...";
            feedbackInput.classList.add("form-control", "mb-2");
            feedbackInput.style.height = "100px"; 
            feedbackBox.appendChild(feedbackInput);
            
            // Create the "OK" button to close the box
            const okButton = document.createElement("button");
            okButton.textContent = "OK";
            okButton.classList.add("btn", "btn-primary", "btn-sm");
            feedbackBox.appendChild(okButton);
            
        
            const showFeedbackBox = () => {
                const rect = statusDropdown.getBoundingClientRect();
                feedbackBox.style.left = `${rect.right + 10}px`; 
                feedbackBox.style.top = `${rect.top}px`;
                feedbackBox.style.visibility = "visible"; 
            };
            
            const hideFeedbackBox = () => {
                feedbackBox.style.visibility = "hidden"; 
            };
            
            // var responsemessage ="";
            // var feedbackmessage = "";

            //feedback textarea selected 
            okButton.addEventListener("click", () => {
                const feedback = feedbackInput.value; 
                feedbackmessage = feedback;
                console.log(responsemessage);
                console.log(feedbackmessage);
                updateResponseMessage(responsemessage,feedbackmessage, unqiuevalue,emailres,workstatusres,taskLinksres,dateres);
                
                hideFeedbackBox(); 
            });
            
            //dropdown box change
            statusDropdown.addEventListener("change", () => {
                statusDropdown.classList.remove("btn-warning", "btn-success", "btn-danger");
                responsemessage =statusDropdown.value;
                const selectedOption = options.find(o => o.value === statusDropdown.value);
                statusDropdown.classList.add(selectedOption.class);
            
                
                if (statusDropdown.value === "Rejected") 
                {
                    document.body.appendChild(feedbackBox);  
                    showFeedbackBox();  
                } else {
                    hideFeedbackBox();  
                }

                if(statusDropdown.value === "Success"){
                    feedbackmessage = "";
                    updateResponseMessage(responsemessage,feedbackmessage, unqiuevalue,emailres,workstatusres,taskLinksres,dateres);
                }
                else if(statusDropdown.value === "Pending"){
                    console.log(responsemessage);
                    console.log(feedbackmessage);
                    feedbackmessage = "";
                    updateResponseMessage(responsemessage,feedbackmessage, unqiuevalue,emailres,workstatusres,taskLinksres,dateres);
                }
            
            });
        

            // Append the dropdown to the status cell
            status.appendChild(statusDropdown);
            
            // Append the status cell to the row
            row.appendChild(status);
            
            // Append the row to the table body
            tableBody.appendChild(row);
            
        }
    }

//DropDown Logic End




//Chat Message

    var ResDate;
    var time;
    var resmessage;
    var RetriveUserNameForChatMessages;
    var Group_Name = document.getElementById("GroupName").textContent;
    const chatButton = document.getElementById('chatButton');
    const chatModal = document.getElementById('chatModal');
    const closeModal = document.getElementById('closeModal');
    const sendMessage = document.getElementById('sendMessage');
    const chatInput = document.getElementById('chatInput');
    const chatMessages = document.getElementById('chatMessages');

    // Display the Current Time
    function displayCurrentTime() {
        const now = new Date();
        const hours = now.getHours().toString().padStart(2, '0'); // Format hours as two digits
        const minutes = now.getMinutes().toString().padStart(2, '0'); // Format minutes as two digits
        const seconds = now.getSeconds().toString().padStart(2, '0');
        const currentTime = `${hours}:${minutes}:${seconds}`;
        timewithoutseconds = `${hours}:${minutes}`;
        return currentTime;
    }

    // Update the time every second
    setInterval(displayCurrentTime, 1000);



    // Open Modal
    chatButton.addEventListener('click', () => {
        chatModal.style.display = 'flex';
    });

    // Close Modal
    closeModal.addEventListener('click', () => {
        chatModal.style.display = 'none';
    });

    // Send Message
    sendMessage.addEventListener('click', () => {
        time = displayCurrentTime();
        const currentDate = new Date();
        ResDate = currentDate.toLocaleDateString();

        resmessage = chatInput.value.trim();
        if (resmessage) {
            const newMessage = document.createElement('li');
            newMessage.textContent = `You: ${resmessage}`;
            chatMessages.appendChild(newMessage);
            chatInput.value = '';
        }

        chatMessageSave();
    });

    //Save the ChatMessage
    function chatMessageSave() {
        const localDate = new Date(ResDate);
        ResDate = localDate.toLocaleDateString('en-CA');
        const data = {
            GroupName: Group_Name,
            UserName: RetriveUserNameForChatMessages,
            Email: EmailFromURL,
            Message: resmessage,
            Date: ResDate,
            Time: time
        };

        console.log(data); // Debugging purpose
        fetch("https://localhost:7035/api/GroupChat/GroupChat", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(data)
        })
        .then(response => {
            if (!response.ok) {
                return response.text().then(errorMessage => {
                    throw new Error(errorMessage || "Network response was not ok");
                });
            }
            return response.text();
        })
        .then(message => {
        })
        .catch(error => {
            alert(error);
            document.getElementById("message").textContent = error;
        });
    }

    //Retrive the ChatMessage for DB
    function RetriveChatMessage() {
        const data = {
            GroupName: Group_Name
        };
        fetch("https://localhost:7035/api/GroupChat/RetriveChatMessage", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(data)
        })
        .then(response => {
            if (!response.ok) {
                return response.text().then(errorMessage => {
                    throw new Error(errorMessage || "Network response was not ok");
                });
            }
            return response.text(); // Returns the response as a string
        })
        .then(message => {
            DisplayChatMessage(message); // Pass the response text to DisplayChatMessage
        })
        .catch(error => {
            alert(error);
        });
    }

    //After Retrive the ChatMessage from DB it will display in the Model
    function DisplayChatMessage(chatMessage) {
        // Parse the JSON string into an array of objects
        const messages = JSON.parse(chatMessage);

        // Iterate over the array and display each message
        for (let item1 of messages) {
            const newMessage = document.createElement('li');
            newMessage.textContent = `[${item1.time}] ${item1.userName}: ${item1.message}`;
            chatMessages.appendChild(newMessage);
        }
    }

    // Retrieve the Username using Email
    function RetriveUserNameForChatMessage(Email) {
        const data = {
            Email: Email
        };
        fetch("https://localhost:7035/api/GroupChat/RetriveUserName", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(data)
        })
        .then(response => {
            if (!response.ok) {
                return response.text().then(errorMessage => {
                    throw new Error(errorMessage || "Network response was not ok");
                });
            }
            return response.text();
        })
        .then(message => {
            RetriveUserNameForChatMessages = message;
        })
        .catch(error => {
            alert(error);
            document.getElementById("message").textContent = error;
        });
    }

//Chat Message Logic End










     
